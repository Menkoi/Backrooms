/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: TheCrafter (https://sketchfab.com/thecrafter)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/low-poly-dungeon-room-2-c010ce0fbe554dc7869742e8f3e32c06
title: Low Poly Dungeon Room #2
*/

import React, { useMemo } from 'react'
import { useGLTF } from '@react-three/drei'
import DungeonGLB from './Models/Dungeon.glb';
import { Geometry } from "three-stdlib";
import { useConvexPolyhedron,  } from "@react-three/cannon";

function toConvexProps(bufferGeometry) {
  const geo = new Geometry().fromBufferGeometry(bufferGeometry);
  // Merge duplicate vertices resulting from glTF export.
  // Cannon assumes contiguous, closed meshes to work
  geo.mergeVertices();
  return [geo.vertices.map((v) => [v.x, v.y, v.z]), geo.faces.map((f) => [f.a, f.b, f.c]), []]; // prettier-ignore
}

export default function DungeonMap({ ...props }) {
  //const group = useRef();
  const { nodes, materials } = useGLTF(DungeonGLB);
  const geo = useMemo(() => toConvexProps(nodes.mergedBlocks_stoneLight_0.geometry), [nodes]);
  const [ref] = useConvexPolyhedron(() => ({ mass: 100, ...props, args: geo, type:'static'}));

  return (
    <group ref={ref} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh geometry={nodes.mergedBlocks__defaultMat_0.geometry} material={materials.defaultMat} />
          <mesh geometry={nodes.mergedBlocks_stoneLight_0.geometry} material={materials.stoneLight} />
          <mesh geometry={nodes.mergedBlocks_stoneDark_0.geometry} material={materials.stoneDark} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload(DungeonGLB)
